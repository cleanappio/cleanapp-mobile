# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Default value: -Xmx10248m -XX:MaxPermSize=256m
# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Automatically convert third-party libraries to use AndroidX
android.enableJetifier=true

# Version of flipper SDK to use with React Native
FLIPPER_VERSION=0.173.0

org.gradle.jvmargs=-Xmx4096m -XX:MaxPermSize=4096m -XX:+HeapDumpOnOutOfMemoryError
org.gradle.daemon=true
org.gradle.parallel=true
org.gradle.configureondemand=true
# Use this property to specify which architecture you want to build.
# You can also override it from the CLI using
# ./gradlew <task> -PreactNativeArchitectures=x86_64
reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64

# Use this property to enable support to the new architecture.
# This will allow you to use TurboModules and the Fabric render in
# your application. You should enable this flag either if you want
# to write custom TurboModules/Fabric components OR use libraries that
# are providing them.
newArchEnabled=false
MAPBOX_DOWNLOADS_TOKEN=sk.eyJ1IjoidGllcnJlMDcwMyIsImEiOiJjbGkzYnVmMGIwYnh6M2VzMTJ4dHk4MDFxIn0.12xDlr3_pFivlBU2VA3PfQ

# Configure the properties for your build as described below:
# 1. Create the signing directore in your home directory.
#
# $ mkdir $HOME/.signing
#
# 2. Create the keystore file in the $HOME/.signing directory.
# File name should be "release.keystore".
# See e.g. https://instamobile.io/android-development/generate-react-native-release-build-android/
#
# 3. Create the properties file pointing to the keystore and containing password.
#
# $ echo "keystore=<your homedir>/.signing/release.keystore\nkeystore.password=<your keystore password>" > $HOME/.signing/cleanapp.properties
#
# 4. Change this property to point on the cleanapp.properties on your machine.
CleanApp.properties=/Users/eko2000/.signing/cleanapp.properties

# MYAPP_UPLOAD_STORE_FILE=release.keystore
# MYAPP_UPLOAD_KEY_ALIAS=release
# MYAPP_UPLOAD_STORE_PASSWORD=
# MYAPP_UPLOAD_KEY_PASSWORD=